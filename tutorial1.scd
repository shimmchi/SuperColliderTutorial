// SuperColliderでは実行したい行にカーソルを合わせて ctrl+Enter でプログラムを実行します

"Hello World!".postln;

// Post Windowに文字が表示されたのが確認できたでしょうか？

// 次に簡単な計算をしてみます

1+2+3+4+5;

// 同じく ctrl+Enter で実行すると、計算結果が表示されたと思います。

// 複数行のプログラムは()で括ることでまとめて実行することが出来ます。

(
a = 10;
b = 25;
c = a + b;
c.postln;
)

// 関数は{}内に記述します。
// 実行する時は 関数名.value です。
// ちなみに、変数名や関数名としては基本的に一文字のアルファベットしか使えないみたいです。よくわかりません。。。

(
f = { 2*2*2*2 };
f.value;
)

// 関数に引数を渡したい場合は、||を使います。

(
g = {|x| x*2};
g.value(5);
)

// SuperColliderに用意されているクラスやメソッドについては、プログラム中のクラス名やメソッドを選択して ctrl+d でヘルプを参照することが出来ます。例えば関数については
Function
// でヘルプ調べるといろいろと例が載っています。


/*************************************************************/



// それでは早速、音を鳴らすプログラムを書いてみましょう！

// SuperCollider(以下SC)で音を鳴らすには、まずサーバを立ち上げなくてはなりません。
// 以下のコードを実行すると、サーバが立ち上がります。

s.boot;

// 右下のInterpreter:, Server:の横に緑の数字が表示されればOKです。

// それでは、一番最初の音を鳴らすプログラムです。以下のコードを実行してください。

{SinOsc.ar(440)}.play;

// 音が再生されれば成功です！
// 音を止めるには ctrl+. です。

SinOsc
// はsin波を生成するオシレーターです。
.ar
// はaudio rateの略で、SinOsc.ar() で、音を鳴らすためにsin波を生成しますよ、という意味になります。

// もうひとつ
.kr
// というものもあり、SinOsc.kr() で、パラメータを変調するためのsin波を生成する、という意味になります。
// 例えば以下のように使います。

{SinOsc.ar(SinOsc.kr(freq:5, phase:0, mul:100, add:400))}.play;

// 先程のサイン波の周波数を、周波数5Hzのサイン波で置き換えました。
// うねうねとうねる音が聞こえたと思います。
// mul:100 はsin波の値に100を掛けるという意味
// add:400 は400を足すという意味です。
// つまり、この音の周波数は400Hzを中心として300Hz - 500Hzの範囲で、5Hzの周波数で変動します。


// arはオーディオレートを意味しており、デフォルトでは44.1kHzで動作します。
// 一方、krはコントロールレートを意味しており、デフォルトではオーディオレートの64回に1回サンプルを生成します。
// krはarに比べて計算不負荷が軽くなりますが、オーディオ信号のコントロールとしてのみ使います。

// 参考
// https://doc.sccode.org/Tutorials/Mark_Polishook_tutorial/Japanese_version/04.html










